// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_Field_mode
arma::vec test_Field_mode(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_mode(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_mode(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_loglik
double test_Field_loglik(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_loglik(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_loglik(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_logdet
double test_Field_logdet(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_logdet(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_logdet(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_loghes
double test_Field_loghes(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_loghes(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_loghes(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_lapapp
double test_Field_lapapp(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_lapapp(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_lapapp(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_dlp_dmu
arma::vec test_Field_dlp_dmu(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_dlp_dmu(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_dlp_dmu(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_dlp_ds
arma::vec test_Field_dlp_ds(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_dlp_ds(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_dlp_ds(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_dlp_dC
arma::mat test_Field_dlp_dC(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_dlp_dC(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_dlp_dC(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Field_Q
arma::mat test_Field_Q(arma::vec y, arma::vec n, arma::vec mu, arma::vec s, arma::mat Q);
RcppExport SEXP _inlassle_test_Field_Q(SEXP ySEXP, SEXP nSEXP, SEXP muSEXP, SEXP sSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Field_Q(y, n, mu, s, Q));
    return rcpp_result_gen;
END_RCPP
}
// test_Gaussian_C
arma::mat test_Gaussian_C(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Gaussian_C(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Gaussian_C(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Gaussian_dC_dt
arma::mat test_Gaussian_dC_dt(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Gaussian_dC_dt(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Gaussian_dC_dt(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Gaussian_dC_dD
arma::cube test_Gaussian_dC_dD(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Gaussian_dC_dD(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Gaussian_dC_dD(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Likelihood
Rcpp::List test_Likelihood(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, arma::vec t, arma::vec v, arma::vec s, arma::vec b, bool parallel);
RcppExport SEXP _inlassle_test_Likelihood(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP tSEXP, SEXP vSEXP, SEXP sSEXP, SEXP bSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Likelihood(N, Y, X, D, t, v, s, b, parallel));
    return rcpp_result_gen;
END_RCPP
}
// test_Matern_C
arma::mat test_Matern_C(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Matern_C(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Matern_C(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Matern_dC_dt
arma::mat test_Matern_dC_dt(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Matern_dC_dt(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Matern_dC_dt(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Matern_dC_dD
arma::cube test_Matern_dC_dD(arma::cube D, double nu, double delta, arma::vec pars);
RcppExport SEXP _inlassle_test_Matern_dC_dD(SEXP DSEXP, SEXP nuSEXP, SEXP deltaSEXP, SEXP parsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pars(parsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Matern_dC_dD(D, nu, delta, pars));
    return rcpp_result_gen;
END_RCPP
}
// test_Parameters
Rcpp::List test_Parameters(arma::vec t, arma::vec v, arma::vec s, arma::vec b);
RcppExport SEXP _inlassle_test_Parameters(SEXP tSEXP, SEXP vSEXP, SEXP sSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Parameters(t, v, s, b));
    return rcpp_result_gen;
END_RCPP
}
// test_ImproperGamma
Rcpp::List test_ImproperGamma(arma::vec x);
RcppExport SEXP _inlassle_test_ImproperGamma(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ImproperGamma(x));
    return rcpp_result_gen;
END_RCPP
}
// test_ImproperWishart
Rcpp::List test_ImproperWishart(arma::vec x);
RcppExport SEXP _inlassle_test_ImproperWishart(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ImproperWishart(x));
    return rcpp_result_gen;
END_RCPP
}
// test_Gaussian
Rcpp::List test_Gaussian(arma::vec x, arma::vec mu, arma::mat Lambda);
RcppExport SEXP _inlassle_test_Gaussian(SEXP xSEXP, SEXP muSEXP, SEXP LambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Gaussian(x, mu, Lambda));
    return rcpp_result_gen;
END_RCPP
}
// test_LKJ
Rcpp::List test_LKJ(arma::vec x, double eta, arma::vec gamma);
RcppExport SEXP _inlassle_test_LKJ(SEXP xSEXP, SEXP etaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_LKJ(x, eta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_LKJ_jac
Rcpp::List test_LKJ_jac(arma::vec x, double eta, arma::vec gamma);
RcppExport SEXP _inlassle_test_LKJ_jac(SEXP xSEXP, SEXP etaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_LKJ_jac(x, eta, gamma));
    return rcpp_result_gen;
END_RCPP
}
// test_LogBetaPrime
Rcpp::List test_LogBetaPrime(arma::vec x, arma::vec mu, arma::vec delta);
RcppExport SEXP _inlassle_test_LogBetaPrime(SEXP xSEXP, SEXP muSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(test_LogBetaPrime(x, mu, delta));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_likelihood
Rcpp::List test_Problem_likelihood(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, arma::vec t, arma::vec v, arma::vec s, arma::vec b, bool parallel);
RcppExport SEXP _inlassle_test_Problem_likelihood(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP tSEXP, SEXP vSEXP, SEXP sSEXP, SEXP bSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_likelihood(N, Y, X, D, t, v, s, b, parallel));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_plikelihood
Rcpp::List test_Problem_plikelihood(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, arma::vec t, arma::vec v, arma::vec s, arma::vec b, bool parallel);
RcppExport SEXP _inlassle_test_Problem_plikelihood(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP tSEXP, SEXP vSEXP, SEXP sSEXP, SEXP bSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t(tSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_plikelihood(N, Y, X, D, t, v, s, b, parallel));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_optimize
arma::vec test_Problem_optimize(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, bool parallel, double tol);
RcppExport SEXP _inlassle_test_Problem_optimize(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP parallelSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_optimize(N, Y, X, D, parallel, tol));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_optimize_fixed
arma::vec test_Problem_optimize_fixed(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, bool parallel, double tol, double nu, arma::vec start, arma::uvec fix);
RcppExport SEXP _inlassle_test_Problem_optimize_fixed(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP parallelSEXP, SEXP tolSEXP, SEXP nuSEXP, SEXP startSEXP, SEXP fixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type start(startSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type fix(fixSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_optimize_fixed(N, Y, X, D, parallel, tol, nu, start, fix));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_penalize
arma::vec test_Problem_penalize(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, bool parallel, double tol);
RcppExport SEXP _inlassle_test_Problem_penalize(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP parallelSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_penalize(N, Y, X, D, parallel, tol));
    return rcpp_result_gen;
END_RCPP
}
// test_Problem_priors
arma::vec test_Problem_priors(arma::mat N, arma::mat Y, arma::mat X, arma::cube D, bool parallel, double tol);
RcppExport SEXP _inlassle_test_Problem_priors(SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP parallelSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type D(DSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(test_Problem_priors(N, Y, X, D, parallel, tol));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_likelihood
Rcpp::List test_ResistanceOptim_likelihood(const arma::vec& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A);
RcppExport SEXP _inlassle_test_ResistanceOptim_likelihood(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_likelihood(pars, N, Y, X, D, Z, T, A));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_fixed_optimize
Rcpp::List test_ResistanceOptim_fixed_optimize(const arma::vec& pars, const arma::vec& fix, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A, const arma::uword verbose);
RcppExport SEXP _inlassle_test_ResistanceOptim_fixed_optimize(SEXP parsSEXP, SEXP fixSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type fix(fixSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_fixed_optimize(pars, fix, N, Y, X, D, Z, T, A, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_optimize
Rcpp::List test_ResistanceOptim_optimize(const arma::vec& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A, const arma::uword verbose);
RcppExport SEXP _inlassle_test_ResistanceOptim_optimize(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_optimize(pars, N, Y, X, D, Z, T, A, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_optimize_global
Rcpp::List test_ResistanceOptim_optimize_global(const arma::vec& lb, const arma::vec& ub, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A, const arma::uword verbose);
RcppExport SEXP _inlassle_test_ResistanceOptim_optimize_global(SEXP lbSEXP, SEXP ubSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_optimize_global(lb, ub, N, Y, X, D, Z, T, A, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_grid
Rcpp::List test_ResistanceOptim_grid(const arma::mat& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A);
RcppExport SEXP _inlassle_test_ResistanceOptim_grid(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_grid(pars, N, Y, X, D, Z, T, A));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_priors_likelihood
Rcpp::List test_ResistanceOptim_priors_likelihood(const arma::vec& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A);
RcppExport SEXP _inlassle_test_ResistanceOptim_priors_likelihood(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_priors_likelihood(pars, N, Y, X, D, Z, T, A));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_priors_optimize
Rcpp::List test_ResistanceOptim_priors_optimize(const arma::vec& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A, const arma::uword verbose);
RcppExport SEXP _inlassle_test_ResistanceOptim_priors_optimize(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_priors_optimize(pars, N, Y, X, D, Z, T, A, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_priors_optimize_global
Rcpp::List test_ResistanceOptim_priors_optimize_global(const arma::vec& lb, const arma::vec& ub, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A, const arma::uword verbose);
RcppExport SEXP _inlassle_test_ResistanceOptim_priors_optimize_global(SEXP lbSEXP, SEXP ubSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_priors_optimize_global(lb, ub, N, Y, X, D, Z, T, A, verbose));
    return rcpp_result_gen;
END_RCPP
}
// test_ResistanceOptim_priors_grid
Rcpp::List test_ResistanceOptim_priors_grid(const arma::mat& pars, const arma::mat& N, const arma::mat& Y, const arma::mat& X, const arma::cube& D, const Eigen::MatrixXd& Z, const std::vector<unsigned>& T, const Eigen::MatrixXi& A);
RcppExport SEXP _inlassle_test_ResistanceOptim_priors_grid(SEXP parsSEXP, SEXP NSEXP, SEXP YSEXP, SEXP XSEXP, SEXP DSEXP, SEXP ZSEXP, SEXP TSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned>& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXi& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(test_ResistanceOptim_priors_grid(pars, N, Y, X, D, Z, T, A));
    return rcpp_result_gen;
END_RCPP
}
// testlink
void testlink();
RcppExport SEXP _inlassle_testlink() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    testlink();
    return R_NilValue;
END_RCPP
}
// testrd
Eigen::MatrixXd testrd(Eigen::MatrixXd spdat, Eigen::MatrixXi adj, std::vector<unsigned> targ, Eigen::VectorXd pars, Eigen::MatrixXd diff, bool parallel);
RcppExport SEXP _inlassle_testrd(SEXP spdatSEXP, SEXP adjSEXP, SEXP targSEXP, SEXP parsSEXP, SEXP diffSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type spdat(spdatSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned> >::type targ(targSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type pars(parsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(testrd(spdat, adj, targ, pars, diff, parallel));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_HessianBlock_inc1
arma::cube inlassle_test_HessianBlock_inc1(arma::mat inp);
RcppExport SEXP _inlassle_inlassle_test_HessianBlock_inc1(SEXP inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp(inpSEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_HessianBlock_inc1(inp));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_HessianBlock_inc2
arma::cube inlassle_test_HessianBlock_inc2(arma::mat inp1, arma::mat inp2);
RcppExport SEXP _inlassle_inlassle_test_HessianBlock_inc2(SEXP inp1SEXP, SEXP inp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp1(inp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inp2(inp2SEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_HessianBlock_inc2(inp1, inp2));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_HessianBlock_join
arma::cube inlassle_test_HessianBlock_join(arma::mat inp1, arma::mat inp2);
RcppExport SEXP _inlassle_inlassle_test_HessianBlock_join(SEXP inp1SEXP, SEXP inp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp1(inp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inp2(inp2SEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_HessianBlock_join(inp1, inp2));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_GradientBlock_inc1
arma::vec inlassle_test_GradientBlock_inc1(arma::mat inp);
RcppExport SEXP _inlassle_inlassle_test_GradientBlock_inc1(SEXP inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp(inpSEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_GradientBlock_inc1(inp));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_GradientBlock_inc2
arma::vec inlassle_test_GradientBlock_inc2(arma::mat inp1, arma::mat inp2);
RcppExport SEXP _inlassle_inlassle_test_GradientBlock_inc2(SEXP inp1SEXP, SEXP inp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp1(inp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inp2(inp2SEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_GradientBlock_inc2(inp1, inp2));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_GradientBlock_join
arma::vec inlassle_test_GradientBlock_join(arma::mat inp1, arma::mat inp2);
RcppExport SEXP _inlassle_inlassle_test_GradientBlock_join(SEXP inp1SEXP, SEXP inp2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type inp1(inp1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type inp2(inp2SEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_GradientBlock_join(inp1, inp2));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_Gradient
arma::vec inlassle_test_Gradient(arma::mat dt, arma::mat dv, arma::mat ds, arma::mat db);
RcppExport SEXP _inlassle_inlassle_test_Gradient(SEXP dtSEXP, SEXP dvSEXP, SEXP dsSEXP, SEXP dbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dv(dvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type db(dbSEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_Gradient(dt, dv, ds, db));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_Gradient_dC
arma::mat inlassle_test_Gradient_dC(arma::cube dC);
RcppExport SEXP _inlassle_inlassle_test_Gradient_dC(SEXP dCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type dC(dCSEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_Gradient_dC(dC));
    return rcpp_result_gen;
END_RCPP
}
// inlassle_test_Hessian
arma::mat inlassle_test_Hessian(arma::mat dt, arma::mat dv, arma::mat ds, arma::mat db);
RcppExport SEXP _inlassle_inlassle_test_Hessian(SEXP dtSEXP, SEXP dvSEXP, SEXP dsSEXP, SEXP dbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type dv(dvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ds(dsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type db(dbSEXP);
    rcpp_result_gen = Rcpp::wrap(inlassle_test_Hessian(dt, dv, ds, db));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_inlassle();

static const R_CallMethodDef CallEntries[] = {
    {"_inlassle_test_Field_mode", (DL_FUNC) &_inlassle_test_Field_mode, 5},
    {"_inlassle_test_Field_loglik", (DL_FUNC) &_inlassle_test_Field_loglik, 5},
    {"_inlassle_test_Field_logdet", (DL_FUNC) &_inlassle_test_Field_logdet, 5},
    {"_inlassle_test_Field_loghes", (DL_FUNC) &_inlassle_test_Field_loghes, 5},
    {"_inlassle_test_Field_lapapp", (DL_FUNC) &_inlassle_test_Field_lapapp, 5},
    {"_inlassle_test_Field_dlp_dmu", (DL_FUNC) &_inlassle_test_Field_dlp_dmu, 5},
    {"_inlassle_test_Field_dlp_ds", (DL_FUNC) &_inlassle_test_Field_dlp_ds, 5},
    {"_inlassle_test_Field_dlp_dC", (DL_FUNC) &_inlassle_test_Field_dlp_dC, 5},
    {"_inlassle_test_Field_Q", (DL_FUNC) &_inlassle_test_Field_Q, 5},
    {"_inlassle_test_Gaussian_C", (DL_FUNC) &_inlassle_test_Gaussian_C, 4},
    {"_inlassle_test_Gaussian_dC_dt", (DL_FUNC) &_inlassle_test_Gaussian_dC_dt, 4},
    {"_inlassle_test_Gaussian_dC_dD", (DL_FUNC) &_inlassle_test_Gaussian_dC_dD, 4},
    {"_inlassle_test_Likelihood", (DL_FUNC) &_inlassle_test_Likelihood, 9},
    {"_inlassle_test_Matern_C", (DL_FUNC) &_inlassle_test_Matern_C, 4},
    {"_inlassle_test_Matern_dC_dt", (DL_FUNC) &_inlassle_test_Matern_dC_dt, 4},
    {"_inlassle_test_Matern_dC_dD", (DL_FUNC) &_inlassle_test_Matern_dC_dD, 4},
    {"_inlassle_test_Parameters", (DL_FUNC) &_inlassle_test_Parameters, 4},
    {"_inlassle_test_ImproperGamma", (DL_FUNC) &_inlassle_test_ImproperGamma, 1},
    {"_inlassle_test_ImproperWishart", (DL_FUNC) &_inlassle_test_ImproperWishart, 1},
    {"_inlassle_test_Gaussian", (DL_FUNC) &_inlassle_test_Gaussian, 3},
    {"_inlassle_test_LKJ", (DL_FUNC) &_inlassle_test_LKJ, 3},
    {"_inlassle_test_LKJ_jac", (DL_FUNC) &_inlassle_test_LKJ_jac, 3},
    {"_inlassle_test_LogBetaPrime", (DL_FUNC) &_inlassle_test_LogBetaPrime, 3},
    {"_inlassle_test_Problem_likelihood", (DL_FUNC) &_inlassle_test_Problem_likelihood, 9},
    {"_inlassle_test_Problem_plikelihood", (DL_FUNC) &_inlassle_test_Problem_plikelihood, 9},
    {"_inlassle_test_Problem_optimize", (DL_FUNC) &_inlassle_test_Problem_optimize, 6},
    {"_inlassle_test_Problem_optimize_fixed", (DL_FUNC) &_inlassle_test_Problem_optimize_fixed, 9},
    {"_inlassle_test_Problem_penalize", (DL_FUNC) &_inlassle_test_Problem_penalize, 6},
    {"_inlassle_test_Problem_priors", (DL_FUNC) &_inlassle_test_Problem_priors, 6},
    {"_inlassle_test_ResistanceOptim_likelihood", (DL_FUNC) &_inlassle_test_ResistanceOptim_likelihood, 8},
    {"_inlassle_test_ResistanceOptim_fixed_optimize", (DL_FUNC) &_inlassle_test_ResistanceOptim_fixed_optimize, 10},
    {"_inlassle_test_ResistanceOptim_optimize", (DL_FUNC) &_inlassle_test_ResistanceOptim_optimize, 9},
    {"_inlassle_test_ResistanceOptim_optimize_global", (DL_FUNC) &_inlassle_test_ResistanceOptim_optimize_global, 10},
    {"_inlassle_test_ResistanceOptim_grid", (DL_FUNC) &_inlassle_test_ResistanceOptim_grid, 8},
    {"_inlassle_test_ResistanceOptim_priors_likelihood", (DL_FUNC) &_inlassle_test_ResistanceOptim_priors_likelihood, 8},
    {"_inlassle_test_ResistanceOptim_priors_optimize", (DL_FUNC) &_inlassle_test_ResistanceOptim_priors_optimize, 9},
    {"_inlassle_test_ResistanceOptim_priors_optimize_global", (DL_FUNC) &_inlassle_test_ResistanceOptim_priors_optimize_global, 10},
    {"_inlassle_test_ResistanceOptim_priors_grid", (DL_FUNC) &_inlassle_test_ResistanceOptim_priors_grid, 8},
    {"_inlassle_testlink", (DL_FUNC) &_inlassle_testlink, 0},
    {"_inlassle_testrd", (DL_FUNC) &_inlassle_testrd, 6},
    {"_inlassle_inlassle_test_HessianBlock_inc1", (DL_FUNC) &_inlassle_inlassle_test_HessianBlock_inc1, 1},
    {"_inlassle_inlassle_test_HessianBlock_inc2", (DL_FUNC) &_inlassle_inlassle_test_HessianBlock_inc2, 2},
    {"_inlassle_inlassle_test_HessianBlock_join", (DL_FUNC) &_inlassle_inlassle_test_HessianBlock_join, 2},
    {"_inlassle_inlassle_test_GradientBlock_inc1", (DL_FUNC) &_inlassle_inlassle_test_GradientBlock_inc1, 1},
    {"_inlassle_inlassle_test_GradientBlock_inc2", (DL_FUNC) &_inlassle_inlassle_test_GradientBlock_inc2, 2},
    {"_inlassle_inlassle_test_GradientBlock_join", (DL_FUNC) &_inlassle_inlassle_test_GradientBlock_join, 2},
    {"_inlassle_inlassle_test_Gradient", (DL_FUNC) &_inlassle_inlassle_test_Gradient, 4},
    {"_inlassle_inlassle_test_Gradient_dC", (DL_FUNC) &_inlassle_inlassle_test_Gradient_dC, 1},
    {"_inlassle_inlassle_test_Hessian", (DL_FUNC) &_inlassle_inlassle_test_Hessian, 4},
    {"_rcpp_module_boot_inlassle", (DL_FUNC) &_rcpp_module_boot_inlassle, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_inlassle(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
